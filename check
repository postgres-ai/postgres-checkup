#!/bin/bash
#
# 2018 © Victor Yagofarov victor@postgres.ai
# 2018 © Postgres.ai
#
# Perform a PostgreSQL instance(s) health checks
# Usage: $0 --help
#

# GLOBALS (user-assigned variables)
CMD_TIMEOUT="10" # timeout for command (ssh, psql, etc.)
                 # TODO(vyagofarov): think about timing 
                 # out commands in macOS

# GLOBALS (autoload, do not change)
: ${DEBUG:=false} # print debug output
SCRIPT_NAME=$(basename $0)
SCRIPT_DIR=$(dirname $0)
SAFE_IFS="$IFS"
FIRST_ARG="$1"
ALL_ARGS="$@"
OPTIONS_ERROR_EXIT="false"

#######################################
# Print an message to STDOUT
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   (text) STDOUT
#######################################
function msg() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')] $@"
}

#######################################
# Print a debug-level message to STDOUT
# Globals:
#   DEBUG
# Arguments:
#   (text) Message
# Returns:
#   None
#######################################
function dbg() {
  if [[ $DEBUG == "true" ]] ; then
    msg "DEBUG: ${FUNCNAME[1]}: $@"
  fi
}

#######################################
# Print an error/warning/notice message to STDERR
#   Please use 'exit' with code after usage
#   of this function (if needed)
# Globals:
#   None
# Arguments:
#   (text) Error message
# Returns:
#   (text) STDERR
#######################################
function err() {
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')] ERROR: ${FUNCNAME[1]}: $@" >&2
}

#######################################
# Error trapping function, prints line number
# Globals:
#   SCRIPT_NAME, BASH_LINENO[0]
# Arguments:
#   (text) Message
# Returns:
#   (lines with text) STDOUT
#######################################
error_handler() {
  err "^^^ ERROR at [file: '${SCRIPT_NAME}', line: '${BASH_LINENO[0]}']" >&2
  echo >&2
}

#######################################
# Cleanup function: close ssh sockets, etc.
# Globals:
#   HOST
# Arguments:
#   None
# Returns:
#   (lines with text) STDOUT/STDERR
#######################################
cleanup_and_exit() {
  local exit_code="$?" # we can detect exit code here 
  if [[ ! -z ${HOST+x} ]]; then
    dbg "closing ssh conenction to host '$HOST' (if exists)"
    (ssh -O exit ${HOST} 2>/dev/null) || true
  fi
  dbg "exit code is: '${exit_code}'"
  exit "${exit_code}"
}

#######################################
# Read non-comment and non-empty lines from cli.conf
# Globals:
#   SCRIPT_DIR
# Arguments:
#   None
# Returns:
#   (lines with text) STDOUT
#######################################
load_cli_res() {
  local setting
  if [[ ! -f "${SCRIPT_DIR}/resources/cli.conf" ]]; then
    err "Can't load '${SCRIPT_DIR}/resources/cli.conf'"
    exit 2
  fi
  while read -r setting; do
    # skip comments
    local re='^(#|$|[:blank:])'
    [[ "$setting" =~ $re ]] && continue
    echo "${setting}'"
  done <"${SCRIPT_DIR}"/resources/cli.conf
}

#######################################
# Fill structures with possible CLI arguments from file
# Globals:
#   CLI_ARGS_POSSIBLE, SECTION[], SHORT_NAME[],
#   FULL_NAME[], ARG_TYPE[], MANDATARY[], DESCRIPTION[],
#   ARGS_ARE_READED
# Arguments:
#   None
# Returns:
#   None
#######################################
read_possible_args() {
  local iter_num=0
  local section short_name full_name arg_type mandatary description

  if [[ ! -f "${SCRIPT_DIR}/resources/cli.conf" ]]; then
    err "Can't load '${SCRIPT_DIR}/resources/cli.conf'"
    exit 2
  fi

  while IFS="|" read -r section short_name full_name internal_name arg_type mandatary description; do
    # cut last garbage symbol
    # TODO(vyagofarov): understand this 'cutting' behavior
    description=${description%?}

    SECTION[$iter_num]="$section"
    SHORT_NAME[$iter_num]="$short_name"
    FULL_NAME[$iter_num]="$full_name"
    INTERNAL_NAME[$iter_num]="$internal_name"
    ARG_TYPE[$iter_num]="$arg_type"
    MANDATARY[$iter_num]="$mandatary"
    DESCRIPTION[$iter_num]="$description"

    dbg "iteration number: $iter_num"
    dbg "1: section '${SECTION[$iter_num]}'"
    dbg "2: short_name '${SHORT_NAME[$iter_num]}'"
    dbg "3: full_name '${FULL_NAME[$iter_num]}'"
    dbg "4: internal_name '${INTERNAL_NAME[$iter_num]}'"
    dbg "5: arg_type '${ARG_TYPE[$iter_num]}'"
    dbg "6: mandatary '${MANDATARY[$iter_num]}'"
    dbg "7: description '${DESCRIPTION[$iter_num]}'"

    iter_num=$(( iter_num + 1 ))
  done < <(load_cli_res)
  
  # $CLI_ARGS_POSSIBLE is a global index 
  # for all CLI input values and their properties,
  # starting from zero (convenient for arrays)
  CLI_ARGS_POSSIBLE=$(( iter_num - 1 ))

  ARGS_ARE_READED="true"
  dbg "possible args are readed"
}

#######################################
# Parse CLI arguments and save as an indexed array
# Globals:
#   $1, CLI_ARGS_POSSIBLE, SHORT_NAME[], FULL_NAME[], ARG_VALUE[],
#   CLI_ARGS_CNT, ARG_IS_GIVEN[]
# Arguments:
#   $@
# Returns:
#   None
#######################################
process_cli_args() {
  local cli_arg_cur_value i
  local re='^-+'
  local while_loops_cnt=0
  local second
  dbg "Valid CLI args possible count: ${CLI_ARGS_POSSIBLE}+1"
  CLI_ARGS_CNT=0
  while [[ ! -z "${1+x}" ]]; do
    # avoid infinite loop if argument is unknown
    while_loops_cnt=$(( while_loops_cnt + 1 ))
    [[ $while_loops_cnt -gt $(( CLI_ARGS_POSSIBLE * 2 )) ]] && break

    for i in $(seq 0 ${CLI_ARGS_POSSIBLE}); do
      if [[ ! -z "${1+x}" ]]; then
        case $1 in
          "-${SHORT_NAME[$i]}" | "--${FULL_NAME[$i]}" )
            if [[ ! -z "${2+x}" ]]; then
              second="$2"
            else
              second=None
              err "empty value for variable '--${FULL_NAME[$i]}'"
              exit 1
            fi
            [[ -z "$second" ]] && exit 1
            dbg "argname: '$1', argvalue '${second}' "
            if [[ "$second" =~ $re ]]; then
              err "empty value in '--${FULL_NAME[$i]}'"
              exit 1
            fi
            # save argument value as an indexed array
            ARG_VALUE[$i]="$second"
            ARG_IS_GIVEN[$i]="true"
            CLI_ARGS_CNT=$(( CLI_ARGS_CNT + 1 ))
            shift 2
        esac
      fi
    done
  done
  dbg "given arguments count: '$CLI_ARGS_CNT'"
}

#######################################
# Validate single argument type
# Globals:
#   None
# Arguments:
#   $1, $2, $3
# Returns:
#   None
#######################################
validate_arg_type() {
  local name="$1"
  local type="$2"
  local value="$3"
  local re

  if [ -z "$name" -o -z "$type" -o -z "$value" ]; then
     err "name: '$name', type: '$type', value: '$value'"
  fi

  if [[ "$type" = "number" ]]; then
    re='^[0-9]+$'
    if ! [[ $value =~ $re ]] ; then
       err "'$name' = '$value' => is not a '$type' (${re})"
       exit 1
    fi
  elif [ $type = "word" ]; then
    re='^[a-zA-Z0-9_-]+$'
    if ! [[ $value =~ $re ]]; then
       err "'$name' = '$value' => is not a '$type' (${re})"
       exit 1
    fi
  elif [ $type = "alnum" ]; then
    re='^[a-zA-Z0-9\.]+$'
    if ! [[ $value =~ $re ]]; then
       err "'$name' = '$value' => is not a '$type' (${re})"
       exit 1
    fi
  elif [[ $type = "uri" ]]; then
    re='^[a-zA-Z\;\:\\\/]+.*'
    if ! [[ $value =~ $re ]]; then
       err "'$name' = '$value' => is not a '$type' (${re})"
       exit 1
    fi
  elif [[ $type = "filepath" ]]; then
    re='.*'
    if ! [[ $value =~ $re ]]; then
       err "'$name' = '$value' => is not a '$type' (${re})"
       exit 1
    fi
  elif [[ $type = "text" ]]; then
    re='^[a-zA-Z0-9\;\.\s\\\/]+.*'
    if ! [[ $value =~ $re ]]; then
       err "'$name' = '$value' => is not a '$type' (${re})"
       exit 1
    fi
  else
    err "'$name' = '$value' => unknown argument type, validation error"
    exit 1
  fi
}

#######################################
# Validate arguments and and save input variables
# Globals:
#   CLI_ARGS_POSSIBLE, SECTION[], SHORT_NAME[],
#   FULL_NAME[], ARG_TYPE[], MANDATARY[], DESCRIPTION[],
#   ARG_VALUE[], ARG_IS_GIVEN[], INTERNAL_*, CLI_ARGS_CNT,
#   MANDATORY[], PSQL_CONN_OPTIONS, HOST, OPTIONS_ERROR_EXIT
# Arguments:
#   None
# Returns:
#   None
#######################################
validate_args() {
  local i
  local x=0
  local re="-+(help|usage|\?)"
  local need_fail_exit="false"

  if [[ "$FIRST_ARG" =~ $re ]]; then
     usage "Help" "0"
     exit 0
  fi

  if [[ "${CLI_ARGS_CNT}" -lt 1 ]]; then
    usage "given less then 1 mandatory argument" "1"
  fi

  for i in $(seq 0 ${CLI_ARGS_POSSIBLE}); do
    if [[ ! -z "${ARG_IS_GIVEN[$i]+x}" ]]; then
      # generate dynamic variables like "$HOST" and export them
      # to make visible from healthcheck scripts
      eval "export ${INTERNAL_NAME[$i]}"="${ARG_VALUE[$i]}"
      validate_arg_type "${FULL_NAME[$i]}" "${ARG_TYPE[$i]}" "${ARG_VALUE[$i]}"
    else
      export "${INTERNAL_NAME[$i]}=None"
    fi
  done

  # fill default (not given) psql connection related variables
  [[ "${PGPORT}" = "None" ]] && export PGPORT=5432
  [[ "${DBNAME}" = "None" ]] && export DBNAME=postgres
  [[ "${USERNAME}" = "None" ]] && export USERNAME="${USER}"

  # custom UNIX domain socket directory for PostgreSQL
  local psql_unix_socket_option=""
  if [[ "${PGSOCKET}" != "None" ]]; then
    psql_unix_socket_option=" --host '${PGSOCKET}' "
  fi

  # custom psql binary path support
  local psql_bin="psql"
  if [[ "${PSQLBINARY}" != "None" ]]; then
    psql_bin="${PSQLBINARY}"
  fi

  # generate or not PGPASSWORD string (for substitution)
  if [[ ! -z ${PGPASSWORD+x} ]]; then
    local pgpas_subst="PGPASSWORD=\"${PGPASSWORD}\" " # whitespace in the end of the string
  else
    local pgpas_subst=""
  fi

  # for usage inside the check scripts
  export PSQL_CONN_OPTIONS="--port=${PGPORT} --dbname=${DBNAME} --username=${USERNAME} ${psql_unix_socket_option}"
  export _PSQL="${pgpas_subst}${psql_bin} -1 -X -At -q -v ON_ERROR_STOP=1 -P pager=off ${PSQL_CONN_OPTIONS}"

  dbg ""
  dbg "PSQL_CONN_OPTIONS: $PSQL_CONN_OPTIONS"
  dbg ""

  # error if mandatory options are not set (print as a stack)
  local buf=""
  for i in $(seq 0 ${CLI_ARGS_POSSIBLE}); do
    if [[ "${MANDATARY[$i]}" == "mandatory" ]] && [[ -z "${ARG_IS_GIVEN[$i]+x}" ]] ; then
      # please do not change align for 'buf' variable text
      buf="$buf
  mandatory option '--${FULL_NAME[$i]}' is not set"
      need_fail_exit=true
      OPTIONS_ERROR_EXIT=true
    fi
  done
  if [[ "$need_fail_exit" = "true" ]]; then
    usage "$buf" "1"
  fi
}

#######################################
# Generate usage/help
# Globals:
#   CLI_ARGS_POSSIBLE, FULL_NAME[], SECTION[]
#   SCRIPT_NAME, SHORT_NAME[], DESCRIPTION[]
# Arguments:
#   description exit_code code
# Returns:
#   (text) stdtout/stderror
#######################################
usage() {
  local i
  local description="$1"
  local exit_code="$2"
  local exit_code=${exit_code:=0}
  local out_descriptor
  local re="[a-zA-Z]"
  if [[ ! "$description" =~ $re ]]; then
    err "First argument of 'usage' must be a text description"
    exit 1
  fi
  # if error: print reason before 'Usage:'
  if [[ "$exit_code" -ne "0" ]]; then
    out_descriptor="2" # STDERR
    echo "ERROR:  " >&${out_descriptor}
    echo "  $description" >&${out_descriptor}
    echo >&${out_descriptor}
  else
    out_descriptor="1" # STDOUT
    # help part starts here
    echo "PgHealth is the PostgreSQL ultimate healthcheck utility." >&${out_descriptor}
    echo >&${out_descriptor}
  fi

  echo "Usage:" >&${out_descriptor}
  echo "  ${SCRIPT_NAME} OPTION [OPTION] ..." >&${out_descriptor}
  echo "  ${SCRIPT_NAME} --help" >&${out_descriptor}
  echo >&${out_descriptor}

  # calc max size of FULL_NAME[] for text alignment
  local max_name_len=0
  for i in $(seq 0 ${CLI_ARGS_POSSIBLE}); do 
    bytlen=${#FULL_NAME[$i]}
    if [[ "$bytlen" -ge "$max_name_len" ]]; then
      max_name_len=$bytlen
    fi 
  done

  local space
  local prev_section="Misc"
  for i in $(seq 0 ${CLI_ARGS_POSSIBLE}); do
    if [[ "${SECTION[$i]}" != "$prev_section" ]] || [[ -z ${SECTION[0]} ]] ; then
      echo  "${SECTION[$i]}:" >&${out_descriptor}
    fi
    [[ "${SHORT_NAME[$i]}" = "None" ]] && SHORT_NAME[$i]=" "
    if [[ "${SHORT_NAME[$i]}" = " " ]]; then
      echo -n "     "${SHORT_NAME[$i]} >&${out_descriptor}
    else
      echo -n "  -"${SHORT_NAME[$i]}"," >&${out_descriptor}
    fi
    curr_byte_len=${#FULL_NAME[$i]}
    # print space padding
    for f in $(seq 0 $(( max_name_len - curr_byte_len + 2 )) ); do
      echo -n " "  >&${out_descriptor}
    done
    echo -n " --"${FULL_NAME[$i]} >&${out_descriptor} 
    echo    "   "${DESCRIPTION[$i]} >&${out_descriptor}
    # print options about this usage/help and additional info in the last iteration
    curr_byte_len="help"
    curr_byte_len=${#curr_byte_len}
    if [[ "$i" -eq "$CLI_ARGS_POSSIBLE" ]]; then
      echo -n "  -?," >&${out_descriptor}
      for f in $(seq 0 $(( max_name_len - curr_byte_len + 2 )) ); do
        echo -n " "  >&${out_descriptor}
      done
      echo -n " --help" >&${out_descriptor} 
      echo    "   this help" >&${out_descriptor}
      # additional info
      echo >&${out_descriptor}
      echo "Example:" >&${out_descriptor}
      echo "PGPASSWORD=postgres ./${SCRIPT_NAME} -h dev -p 5432 --username ${USER} --dbname postgres --project dummy" >&${out_descriptor}
      echo >&${out_descriptor}
      echo "Add more checks into './resources/checks/' directory." >&${out_descriptor}
      echo >&${out_descriptor}
      echo "Report bugs to https://github.com/postgres-ai/postgres-health-check/ ." >&${out_descriptor}
    fi
    prev_section=${SECTION[$i]}
  done
 
  exit $exit_code
}

#######################################
# Generate json report
# Globals:
#   CURRENT_CHECK_FNAME, SCRIPT_DIR, PROJECT,
#   HOST, JSON_REPORTS_DIR, TIMESTAMP_DIR,
#   TIMESTAMPTZ, MD_REPORTS_DIR
# Arguments:
#   input, check_id
# Returns:
#   (text) stdtout/stderror
#######################################
generate_report_json() {
  local input_json="$1"
  local check_id="$2"
  local check_name="$3"

  local epoch="null"

  [[ -z ${3+x} ]] && err "function needs 3 arguments"

  # insert json object data into template
  local template_fname="${SCRIPT_DIR}/resources/templates/report.json"
  local tmp_input_json_fname=$(mktemp "${SCRIPT_DIR}"/artifacts/${check_id}_tmp_XXXXXX)

  # save function's input as a temporary file
  echo "$input_json" > "$tmp_input_json_fname"

  # final report file name
  local json_output_fname="${JSON_REPORTS_DIR}/${check_id}_${check_name}.json"

  # use template or existing file
  if [[ -f "$json_output_fname" ]]; then
    local json_input_fname="${json_output_fname}"
  else
    local json_input_fname="${template_fname}"
  fi

  local tmp_output_json_fname=$(mktemp "${JSON_REPORTS_DIR}"/${check_id}_${check_name}_tmp_XXXXXX)
  jq -r \
     --argfile Results "${tmp_input_json_fname}" \
     --arg CheckId "${check_id}" \
     --arg CheckName "${check_name}" \
     --arg TimestampTz "${TIMESTAMPTZ}" \
     --arg Host "${NATIVE_HOSTNAME}" \
     --arg Project "${PROJECT}" \
    '.checkId = $CheckId | .name = $CheckName | ."timestamptz" = $TimestampTz | ."project" = $Project | .results += { ($Host): { data: $Results } }' \
    "${json_input_fname}" \
    > "${tmp_output_json_fname}"
  mv "${tmp_output_json_fname}" "${json_output_fname}"
  rm "$tmp_input_json_fname"

  # extend check for current host with actual 'nodes.json' inside a json report
  tmp_output_json_fname=$(mktemp "${JSON_REPORTS_DIR}"/${check_id}_${check_name}_tmp_ex_XXXXXX)
  jq --argfile nodes_json "${PROJECT_DIR}/nodes.json" \
     '.results.'\"${NATIVE_HOSTNAME}\"'."nodes.json" = $nodes_json' \
     "${json_output_fname}" \
     > "$tmp_output_json_fname"
  mv "$tmp_output_json_fname" "${json_output_fname}"

  # update json report by attaching 'nodes.json' into top of the report
  tmp_output_json_fname=$(mktemp "${JSON_REPORTS_DIR}"/${check_id}_${check_name}_tmp_ex_XXXXXX)
  jq --argfile nodes_json "${PROJECT_DIR}/nodes.json" \
     '.last_nodes_json = $nodes_json' \
     "${json_output_fname}" \
     > "$tmp_output_json_fname"
  mv "$tmp_output_json_fname" "${json_output_fname}"

  msg "Artifacts saved at: '${json_output_fname}'"
}

#######################################
# Check is host in recovery mode or not
#
# Do not use this function before 'host_pre_start_checks()'
#
# Globals:
#   HOST
# Arguments:
#   None
# Returns:
#   Integer
#######################################
is_in_recovery() {
  local res="$(${CHECK_HOST_CMD} "${_PSQL} -c \"select * from pg_is_in_recovery()\"")"
  if [[ "$res" = "f" ]]; then
    dbg "host $HOST is 'master'"
    return 12
  else
    dbg "host $HOST is 'standby'"
    return 0
  fi
  return 13
}

#######################################
# Build pghrep - a .md report generator
# Globals:
#   PGHREP_BIN
# Arguments:
#   None
# Returns:
#   (text) stdtout/stderror
#######################################
build_pghrep() {
  dbg "building pghrep..."
  local save_pwd="${PWD}"
  cd "${SCRIPT_DIR}/pghrep"
  make buildplugins main >/dev/null
  cd "${save_pwd}"
  export PGHREP_BIN="${SCRIPT_DIR}/pghrep/bin/pghrep"
  dbg "done building pghrep"
}

#######################################
# Check binary dependencies
# Globals:
#   KERNEL_NAME, OS_NAME, timeout()
# Arguments:
#   None
# Returns:
#   (text) stdtout/stderror
#######################################
check_bin_deps() {
  # detect OS
  export KERNEL_NAME=$(uname)
  if [[ "${KERNEL_NAME}" =~ "Darwin" ]]; then
    export OS_NAME="macOS"
    dbg "This is macOS"
  elif [[ "${KERNEL_NAME}" =~ "Linux" ]]; then
    export OS_NAME="Linux"
    dbg "This is Linux"
  else
    export OS_NAME="Unknown"
    dbg "Can't detect OS name"
  fi

  ###### Checking the existence of commands #####

  # timeout
  if ! $(which gtimeout >/dev/null 2>&1) && ! $(which timeout >/dev/null 2>&1); then
    err "Can't find the 'timeout' executable. Please install it:"
    if [[ "${KERNEL_NAME}" = "Darwin" ]]; then
      err "${OS_NAME}: 'brew install coreutils'"
    elif [[ "${KERNEL_NAME}" = "Linux" ]]; then
      err "Debian/Ubuntu GNU/${OS_NAME}: 'sudo apt-get install coreutils'"
      err "RHEL/CentOS GNU/${OS_NAME}: 'sudo yum install coreutils'"
    fi
    return 1
  else
    # redefine command (alias won't work inside the script)
    if [[ "${KERNEL_NAME}" = "Darwin" ]]; then
      timeout() {
        gtimeout "$@"
      }
    fi
  fi

  # awk
  if ! $(which awk >/dev/null 2>&1); then
    err "Can't find the 'awk' executable. Please install it:"
    if [[ "${KERNEL_NAME}" = "Darwin" ]]; then
      err "${OS_NAME}: 'brew install gawk'"
    elif [[ "${KERNEL_NAME}" = "Linux" ]]; then
      err "Debian/Ubuntu GNU/${OS_NAME}: 'sudo apt-get install gawk'"
      err "RHEL/CentOS GNU/${OS_NAME}: 'sudo yum install gawk'"
    fi
    return 1
  fi

  # golang
  if ! $(which go >/dev/null 2>&1); then
    err "Can't find the 'go' executable. Please install it:"
    if [[ "${KERNEL_NAME}" = "Darwin" ]]; then
      err "${OS_NAME}: 'brew install golang'"
    elif [[ "${KERNEL_NAME}" = "Linux" ]]; then
      err "Debian/Ubuntu GNU/${OS_NAME}: 'sudo apt-get install golang'"
      err "RHEL/CentOS GNU/${OS_NAME}: 'sudo yum install golang'"
    fi
    return 1
  fi
  # go version check (>= 1.8)
  re="go([0-9]+.[0-9]+).+"
  local go_version_full=$(go version)
  local version="" # short form (e.g. '1.11')
  local go_version_num="" # get only first two numbers devided by '.'
  if [[ "${go_version_full}" =~ $re ]]; then
    version="${BASH_REMATCH[1]}"
    local major=${version%.*}
    local minor=${version#*.}
    go_version_num="${major}${minor}"
    if [[ $(( go_version_num % 1000 )) -lt "18" ]]; then
      err "Unsupported golang version '${go_version_full}'"
      err "Please install golang version >= '1.8'"
      return 1
    fi
  fi

  # jq
  if ! $(which jq >/dev/null 2>&1); then
    err "Can't find the 'jq' executable. Please install it:"
    if [[ "${KERNEL_NAME}" = "Darwin" ]]; then
      err "${OS_NAME}: 'brew install jq'"
    elif [[ "${KERNEL_NAME}" = "Linux" ]]; then
      err "Debian/Ubuntu GNU/${OS_NAME}: 'sudo apt-get install jq'"
      err "RHEL/CentOS GNU/${OS_NAME}: 'sudo yum install jq'"
    fi
    return 1
  fi
  # jq version
  re="jq([0-9]+.[0-9]+).+"
  local jq_version_full=$(jq --version)
  local version="" # short form (e.g. '1.11')
  local jq_version_num="" # get only first two numbers devided by '.'
  if [[ "${jq_version_full}" =~ $re ]]; then
    version="${BASH_REMATCH[1]}"
    local major=${version%.*}
    local minor=${version#*.}
    jq_version_num="${major}${minor}"
    if [[ $(( go_version_num % 1000 )) -lt "15" ]]; then
      err "Unsupported jq version '${jq_version_full}'"
      err "Please install jq version >= '1.5'"
      return 1
    fi
  fi
}

#######################################
# Check rights, set global variables, etc.
# Globals:
#   HOST, CHECK_HOST_CMD, NATIVE_HOSTNAME
# Arguments:
#   None
# Returns:
#   Integer
#######################################
host_pre_start_checks() {
  # choise host connection command
  # while checking ssh support
  # and determine NATIVE_HOSTNAME (a host key in JSON reports)
  if NATIVE_HOSTNAME=$(ssh $HOST "hostname" 2>/dev/null); then
    # ssh to remote host and use local psql (default)
    export CHECK_HOST_CMD="ssh ${HOST}"
  else
    NATIVE_HOSTNAME="${HOST}"
    # swap ssh with bash
    export CHECK_HOST_CMD="bash -e -u -o pipefail -c"

    # use local psql and connect to remote postgres without ssh
    local re="127\.0"
    if [[ "${HOST}" =~ $re || "${HOST}" = "localhost" ]]; then
      # keep _PSQL as is, use UNIX domain socket for psql
      true
    else
      # use TCP for psql
      export _PSQL="${_PSQL} -h ${HOST}"
    fi
  fi

  export NATIVE_HOSTNAME
  dbg "CHECK_HOST_CMD: '${CHECK_HOST_CMD}'"
  dbg "NATIVE_HOSTNAME: '${NATIVE_HOSTNAME}'"
  dbg "_PSQL: '${_PSQL}'"
}

#######################################
# Update/create 'nodes.json' in the project dir
# Fill/update hostname, role, internal alias
# Start/update 'epoch' of the check
# Globals:
#   PROJECT_DIR, HOST, NATIVE_HOSTNAME,
#   ALIAS_NAME, ALIAS_INDEX, ROLE, JSON_REPORTS_DIR
#   TIMESTAMP_DIR, TIMESTAMPTZ, SHORT_DIR,
#   MD_REPORTS_DIR
# Arguments:
#   None
# Returns:
#   (text) stdtout/stderror
#######################################
update_nodes_json() {
  local prev_role=""
  local prev_epoch=""
  local prev_role=""
  local prev_dir=""
  local host_is_new="false"
  ALIAS_NAME=""
  ALIAS_INDEX=""
  ROLE=""

  # check 'is role has been changed?"
  if is_in_recovery; then
    ROLE="standby"
  else
    ROLE="master"
  fi

  # if file does not exist generate alias for a first host
  if [[ ! -f "${PROJECT_DIR}/nodes.json" ]]; then
    ALIAS_NAME="node1"
    ALIAS_INDEX="1"
    EPOCH="1"
    prev_role="${ROLE}"
    JSON_REPORTS_DIR="${PROJECT_DIR}/json_reports/${EPOCH}_${TIMESTAMP_DIR}"
    MD_REPORTS_DIR="${PROJECT_DIR}/md_reports/${EPOCH}_${TIMESTAMP_DIR}"
    SHORT_DIR="${EPOCH}_${TIMESTAMP_DIR}"

    local input_json_fname="${SCRIPT_DIR}/resources/templates/nodes.json"
  else
    # read current nodes.json
    ALIAS_NAME=$(jq -r '.hosts.'\"${NATIVE_HOSTNAME}\"'.internal_alias' "${PROJECT_DIR}/nodes.json")

    # mark host as new if we can't find alias by path with NATIVE_HOSTNAME
    if [[ "${ALIAS_NAME}" = "null" ]]; then
      host_is_new="true"
      dbg "host '${NATIVE_HOSTNAME}' is a new host"
    fi

    ALIAS_INDEX=$(jq -r '.hosts.'\"${NATIVE_HOSTNAME}\"'.index' "${PROJECT_DIR}/nodes.json")
    prev_role=$(jq -r '.hosts.'\"${NATIVE_HOSTNAME}\"'.role' "${PROJECT_DIR}/nodes.json")
    prev_epoch=$(jq -r '.last_check.epoch' "${PROJECT_DIR}/nodes.json")
    prev_dir=$(jq -r '.last_check.dir' "${PROJECT_DIR}/nodes.json")
    JSON_REPORTS_DIR="${PROJECT_DIR}/json_reports/${prev_dir}"
    MD_REPORTS_DIR="${PROJECT_DIR}/md_reports/${prev_dir}"
    SHORT_DIR="${prev_dir}"

    # exit with error if epoch is not given and this is not first run
    if [[ "${EPOCH}" = "None" ]]; then
      err "epoch not given but epoch '${prev_epoch}' already exist"
      err "to avoid overwriting, please choise health-check epoch"
      err "example: ' ./${SCRIPT_NAME} ${ALL_ARGS} -e %NUMBER% '"
      exit 1
    fi

    local input_json_fname="${PROJECT_DIR}/nodes.json"
  fi

  export JSON_REPORTS_DIR MD_REPORTS_DIR SHORT_DIR

  local role_changed_at="never"
  if [[ "${prev_role}" != "${ROLE}" ]] && [[ "$prev_role" != "null" ]]; then
    msg "WARNING: important difference between checks detected:"
    msg "WARNING: host's role has been changed from '${prev_role}' to '${ROLE}'"
    role_changed_at="${TIMESTAMPTZ}" 
  fi

  # generate new ALIAS_INDEX and ALIAS_NAME for a new host
  if [[ "$host_is_new" = "true" ]]; then
    # get maximum index
    local prev_index=$(jq -r '["\(.hosts | to_entries[] | .value | .index)"] | max' "${PROJECT_DIR}/nodes.json")
    local new_alias_index=$(( prev_index + 1 ))
    local new_alias_name="node${new_alias_index}"
    ALIAS_INDEX="${new_alias_index}"
    ALIAS_NAME="${new_alias_name}"
  fi

  export ALIAS_NAME ALIAS_INDEX ROLE EPOCH
  dbg "ALIAS_NAME: '$ALIAS_NAME'"
  dbg "ALIAS_INDEX: '$ALIAS_INDEX'"
  dbg "ROLE: '$ROLE'"

  mkdir -p "${JSON_REPORTS_DIR}"

  # error if two dir names like '${EPOCH}_*' exist
  local cur_epochs_count="0"
  cur_epochs_count=$(find "${JSON_REPORTS_DIR}" -type d -name "${EPOCH}_*" | wc -l)
  if [[ "$cur_epochs_count" -ge "2" ]]; then
    err "more then one directories witn name '${EPOCH}_*' exist:"
    find "${JSON_REPORTS_DIR}" -type d -name "${EPOCH}_*" >&2 || true
    exit 1
  fi

  # finally, fill nodes.json file
  local result_fname="${PROJECT_DIR}/nodes.json"
  local result_fname_tmp=$(mktemp "${PROJECT_DIR}"/nodes.json.tmp_XXXXXX)
  jq --arg NativeHostname "${NATIVE_HOSTNAME}" \
     --arg internal_alias "${ALIAS_NAME}" \
     --arg index ${ALIAS_INDEX} \
     --arg role "${ROLE}" \
     --arg TimestampTz "${TIMESTAMPTZ}" \
     --arg dir "${SHORT_DIR}" \
     --arg epoch "${EPOCH}" \
     --arg role_change_detected_at "${role_changed_at}" \
     '.hosts += { ($NativeHostname): { $internal_alias, $index, $role, $role_change_detected_at } } | .last_check = { epoch: $epoch, timestamptz: $TimestampTz, dir: $dir }' \
     "${input_json_fname}" \
     > "${result_fname_tmp}"
  mv "${result_fname_tmp}" "${result_fname}"
}

#######################################
# Perform checks
# All checks must return valid json into stdout
# Globals:
#   CURRENT_CHECK_FNAME, SCRIPT_DIR, HOST, PROJECT_DIR,
#   NATIVE_HOSTNAME, PGHREP_BIN
#   and all exported internal globals
# Arguments:
#   None
# Returns:
#   (text) stdtout/stderror
#######################################
run_checks() {
  # perform pre-checks here

  local pghrep_failed_jsons_stack=""

  # perform all checks from './resources/checks/' directory
  msg
  msg "########## Perform checks for host '${NATIVE_HOSTNAME}':"
  local output
  for CURRENT_CHECK_FNAME in "${SCRIPT_DIR}"/resources/checks/*_*.sh; do
    [[ -e "${CURRENT_CHECK_FNAME}" ]] || continue
    msg

    # overwrite all checks to a single check from a file (CLI)
    if [[ "${FILE}" != "None" ]]; then
      CURRENT_CHECK_FNAME="${FILE}"
      if ! [[ -e "${CURRENT_CHECK_FNAME}" ]]; then
        err "Can't open file: '{CURRENT_CHECK_FNAME}'"
      fi
    fi
    msg "========== Perform check: =========="
    msg "$CURRENT_CHECK_FNAME"

    local check_is_failed=false

    # fix timestamp before check
    export TIMESTAMP_DIR=$(date +'%Y_%m_%dT%H_%M_%S_%z') # for use in directories names
    export TIMESTAMPTZ=$(date +'%Y-%m-%d %H:%M:%S.0%z')

    # perform a check from file
    output=$(set -euo pipefail ; source "$CURRENT_CHECK_FNAME") || check_is_failed="true"

    dbg "is check failed?: $check_is_failed"
    msg "========== End of check ==========="
    # extract checkId from check script path
    local check_path_name="$CURRENT_CHECK_FNAME"
    local check_id_tmp_a=${check_path_name%%_*.sh}
    local check_id="${check_id_tmp_a##*/}"

    local check_name_a="${check_path_name##*/}"
    local check_name_b="${check_name_a#*_}"
    local check_name="${check_name_b%.sh}"

    if [[ "$check_is_failed" == "true" ]]; then
      msg "WARNING: check '${check_id}' failed with error ^^^"
      continue
    else
      msg "check '$check_id' is finished"
    fi

    export PROJECT_DIR="${SCRIPT_DIR}/artifacts/${PROJECT}"
    test -d "${PROJECT_DIR}" || mkdir -p "${PROJECT_DIR}"

    # alot of magic is here
    update_nodes_json

    # generate/extend report
    generate_report_json "$output" "$check_id" "$check_name"
    # generate .md report with help of pghrep (go utility)
    # ${JSON_REPORTS_DIR}/${check_id}_${check_name}.json
    mkdir -p "${MD_REPORTS_DIR}"
    local pghrep_output
    if ! pghrep_output=$(${PGHREP_BIN} --checkdata="${JSON_REPORTS_DIR}/${check_id}_${check_name}.json" \
      --outdir="${MD_REPORTS_DIR}" 2>&1) ; then
      msg "WARNING: ${pghrep_output}"
      pghrep_failed_jsons_stack="${pghrep_failed_jsons_stack} ${check_id}_${check_name}.json"
    fi

    # parse only one file if check is given by CLI
    if [[ "${FILE}" != "None" ]]; then
      break
    fi
  done

  msg
  msg "All checks has been finished for host '$HOST'!"
  
  if ! [[ -z "${pghrep_failed_jsons_stack}" ]]; then
    msg
    msg "WARNING: Can't generate md reports for this json's:"
    local i
    for i in ${pghrep_failed_jsons_stack}; do
      echo "        '${i}'"
    done
  fi

  msg
  msg "All .md reports has been saved at directory:"
  echo "        '${MD_REPORTS_DIR}'"

  msg
  msg "ALL DONE!"
}

######### COMMANDS WRAPPERS ###########
ssh() {
  local ssh_timeout_options="-o ConnectTimeout=10 -o ServerAliveInterval=6 -o ServerAliveCountMax=5"
  local ssh_options="-o StrictHostKeyChecking=no -o Compression=no -o BatchMode=yes ${ssh_timeout_options}"

  local ssh_master_socket='/tmp/ssh_pg_check_%h_%p_%r'
  local ssh_master_options="-o ControlMaster=auto -o ControlPersist=yes"
  local ssh_persist=true

  if [[ "$ssh_persist" = "true" ]]; then
      ssh_options="$ssh_options -S $ssh_master_socket $ssh_master_options"
  fi

  command ssh $ssh_options "$@"
}

#######################################
main() {
  set -ueo pipefail
  trap error_handler ERR
  trap cleanup_and_exit 1 2 13 15 EXIT
  unset LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES LC_TIME LC_NUMERIC >/dev/null 2>&1 || true
  export LC_ALL=C
  read_possible_args
  process_cli_args "$@"
  check_bin_deps
  validate_args
  build_pghrep
  host_pre_start_checks
  run_checks
  exit 0
}

main "$@"

# last line of the file
